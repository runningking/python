#!/bin/bash
#  Encoding: utf-8
#  Author:luol2@knownsec.com
#  Description: This script is used to check the domain log on the node.
PATH="/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/sbin:/usr/local/bin"
CONNCMD="ssh -o StrictHostKeyChecking=no"
NUM="0"
LOGPATH="/home/log/cdn"
FIELD=(\\\$2 ,\\\$3 ,\\\$4 ,\\\$5 ,\\\$6 ,\\\$9 ,\\\$10 ,\\\$15 ,\\\$13)
_usage() {
# 使用方法.
echo "指令说明：
   chklog -  统计查询节点日志.

语法格式：
   chklog [参数]...

参数说明：

    连接类参数
        -n  <节点IP地址>
        -k  <指定连接节点密钥文件>
    域名查询类参数
        -a  查询所有域名日志
        -d  <查询域名>
        -c  <指定显示被查域名日志前后记录数>
    日志类型参数
        -w  <查询攻击日志>
        -t  <指定查询时间>（格式:YYYYMMDDHH默认为当前小时日志）
        -m  是否实时监控访问日志（不能与-t选项合用）
        -f  \"<指定显示字段>\"(例：-f \"2 3 6 9 10\" 字段含义可使用-l参数查看)
    统计类参数
        -s  统计域名的访问量并排序(可统计指定时间的日志-t, 默认当前小时)
        -p  统计IP的访问量并排序
    其它参数
        -r  根域查询(如'-d xxoo.com -r'表示查询*.xxoo.com的所有子域名日志)
        -h  获取帮助
        -l  列出日志格式
"
}

_logformat() {
# 日志格式
echo "1.访问时间戳 2.访问时间 3.响应时间 4.攻击类型 5.是否拦截 6.客户端IP 7.代理IP 8.代理详情 9.请求主机名 10.请求URI 11.请求方法 12.请求来源Referer 13.缓存命中情况 14.源站服务器信息 15.访问源站状态码 16.源站返回内容字节数 17.30X状态码目标地址 18.客户端UA 19.客户端语言编码 20.客户端cpu类型 21.客户端cookie信息 22.请求的POST数据"
}

# 定义指令参数
while getopts "n:d:t:k:c:f:amlsphrw" arg
do
    case $arg in
        n)
            NODEIP="$OPTARG";;
        d)
            DOMAIN=" $OPTARG ";;
        a)
            ALLDOMAIN="True";;
        w)
            ATTACK="True";;
        t)
            LOGTIME="$OPTARG";;
        k)
            KEYFILE="$OPTARG";;
        c)
            NUM="$OPTARG";;
        m)
            MONITOR="True";;
        f)
            FIELD="$OPTARG"
            for f in `echo $FIELD`;do
                field="$field,\\\$$f"
            done
            FIELD=($(echo $field | cut -d, -f 2-));;
        s)
            SUMDOMIAN="True";;
        p)
            SUMIP="True";;
        l)
            _logformat
            exit 1;;
        r)
            ROOTDOMAIN="True";;
        h)
            _usage
            exit 1;;
        ?)
            echo "Unkonw argument."
            exit 1;;
    esac
done

__access_log() {
    # 查询访问日志
    if [ $LOGTIME ] && [ $DOMAIN ];then
        CHECKCMD="$CONNCMD  \"zgrep -C $NUM '$DOMAIN' $LOGPATH/access.$LOGTIME.ncsa.gz | awk '{print ${FIELD[*]:0:2}${FIELD[*]:4}}'\""
    else
        if [ $MONITOR ];then
            CHECKCMD="$CONNCMD \"tail -f $LOGPATH/access | awk '{print ${FIELD[*]:0:2}${FIELD[*]:4}}' | grep -C $NUM '$DOMAIN'\""
        else
            CHECKCMD="$CONNCMD \"grep -C $NUM '$DOMAIN' $LOGPATH/access | awk '{print ${FIELD[*]:0:2}${FIELD[*]:4}}'\""
        fi
    fi
}

__waf_log() {
    # 查询攻击日志
    if [ $LOGTIME ] && [ $DOMAIN ];then
        CHECKCMD="$CONNCMD  \"zgrep -C $NUM '$DOMAIN' $LOGPATH/attack.$LOGTIME.ncsa.gz | awk '{print ${FIELD[0]}${FIELD[*]:2:6}}'\""
    else
        if [ $MONITOR ];then
            CHECKCMD="$CONNCMD \"tail -f $LOGPATH/attack | awk '{print ${FIELD[0]}${FIELD[*]:2:6}}' | grep -C $NUM '$DOMAIN'\""
        else
            CHECKCMD="$CONNCMD \"grep -C $NUM '$DOMAIN' $LOGPATH/attack | awk '{print ${FIELD[0]}${FIELD[*]:2:6}}'\""
        fi
    fi
}
__account_sort() {
    # 统计域名与IP数
    if [ $SUMDOMIAN ];then
        if [ $SUMDOMIAN ] && [ $LOGTIME ];then
            CHECKCMD="$CONNCMD \"zcat /home/log/cdn/access.$LOGTIME.ncsa.gz | awk '{hosts[\\\$9]++} END {for(host in hosts) print host,hosts[host]}'|sort -r -n -k2\""
        else
            CHECKCMD="$CONNCMD \"awk '{hosts[\\\$9]++} END {for(host in hosts) print host,hosts[host]}' /home/log/cdn/access | sort -r -n -k2\""
        fi
    else
        if [ $SUMIP ] && [ $LOGTIME ];then
            CHECKCMD="$CONNCMD \"zcat /home/log/cdn/access.$LOGTIME.ncsa.gz | awk '{ips[\\\$6]++} END {for(ip in ips) print ip,ips[ip]}'|sort -r -n -k2\""
        else
            CHECKCMD="$CONNCMD \"awk '{ips[\\\$6]++} END {for(ip in ips) print ip,ips[ip]}' /home/log/cdn/access | sort -r -n -k2\""
        fi
    fi
}

# 检查语法结构
if [ ! $NODEIP ] || [ $# -eq 0 ];then
    _usage
    exit 1
elif [ $DOMAIN ];then
    if [ $LOGTIME ] && [ $MONITOR ];then
        echo "语法错误 -t 与 -m 参数不能同时使用."
        exit 1
    fi
fi

# 连接节点命令
if [ $KEYFILE ];then
    CONNCMD="$CONNCMD -i $KEYFILE log@$NODEIP"
else
    CONNCMD="$CONNCMD log@$NODEIP"
fi

# 查询是否匹配所有子域
if [ $ROOTDOMAIN ];then
    DOMAIN=$(echo "${DOMAIN// /} ")
elif [ $ALLDOMAIN ]; then
    DOMAIN="."
fi



# 打印指定域名日志信息
if [ ! $ATTACK ]; then
    __access_log
else
    __waf_log
fi

# 统计域名及访问量并排序
if [ ! $DOMAIN ];then
    __account_sort
fi

# 执行命令
eval $CHECKCMD
